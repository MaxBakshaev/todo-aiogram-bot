version: '3.9'

services:
  postgres:
    image: postgres:15
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  django:
    build:
      context: .
      dockerfile: docker/Dockerfile.django
    command: >
      sh -c "/wait-for-it.sh postgres:5432 -- 
             /wait-for-it.sh redis:6379 -- 
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.django
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "/wait-for-it.sh postgres:5432 -- 
             python manage.py migrate"
    profiles: ["migrate"]

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile.django
    command: >
      sh -c "/wait-for-it.sh redis:6379 -- 
             celery -A core.project worker --loglevel=info"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.bot
    env_file:
      - .env
    depends_on:
      django:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - .:/app

volumes:
  pgdata: