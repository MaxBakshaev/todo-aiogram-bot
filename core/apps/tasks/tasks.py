"""
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html
"""

from celery import shared_task
from django.utils import timezone
import requests
import os

from .models import Task


BOT_TOKEN = os.getenv("TOKEN")


def send_tg_message(chat_id: int, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""

    if not BOT_TOKEN or not chat_id:
        print(
            f"[Celery] –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: "
            f"BOT_TOKEN={bool(BOT_TOKEN)}, chat_id={chat_id}"
        )
        return

    try:
        response = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": text, "parse_mode": "HTML"},
            timeout=10,
        )
        if response.status_code != 200:
            print(
                f"[Celery] –û—à–∏–±–∫–∞ Telegram API: "
                f"{response.status_code} - {response.text}"
            )
        else:
            print(f"[Celery] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"[Celery] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TG: {e}")


def format_russian_datetime(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç."""

    months = [
        "—è–Ω–≤–∞—Ä—è",
        "—Ñ–µ–≤—Ä–∞–ª—è",
        "–º–∞—Ä—Ç–∞",
        "–∞–ø—Ä–µ–ª—è",
        "–º–∞—è",
        "–∏—é–Ω—è",
        "–∏—é–ª—è",
        "–∞–≤–≥—É—Å—Ç–∞",
        "—Å–µ–Ω—Ç—è–±—Ä—è",
        "–æ–∫—Ç—è–±—Ä—è",
        "–Ω–æ—è–±—Ä—è",
        "–¥–µ–∫–∞–±—Ä—è",
    ]

    hour = dt.hour
    minute = f"{dt.minute:02d}"

    return f"{hour}:{minute}, {dt.day} {months[dt.month-1]} {dt.year}"


@shared_task
def send_task_reminder(task_pk):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏.

    1. –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ primary key
    2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ username (—Ñ–æ—Ä–º–∞—Ç: tg_123456)
    3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:
    ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ

    üìå –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ
    üìÉ –ù–µ –º–µ–Ω—å—à–µ 3,2%
    üî• –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 8:00, 15 –æ–∫—Ç—è–±—Ä—è 2025
    üîñ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–æ–∫—É–ø–∫–∏
    """

    try:
        task = Task.objects.select_related("user").get(pk=task_pk)
    except Task.DoesNotExist:
        print(f"[Celery] –ó–∞–¥–∞—á–∞ —Å PK={task_pk} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ telegram_id –∏–∑ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–æ—Ä–º–∞—Ç: tg_123456)
    if not task.user or not task.user.username.startswith("tg_"):
        print(f"[Celery] –£ –∑–∞–¥–∞—á–∏ '{task.name}' –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    try:
        telegram_id = int(task.user.username.replace("tg_", ""))
    except (ValueError, AttributeError):
        print(f"[Celery] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {task.user.username}")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–æ–≤–æ–π –∑–æ–Ω–µ America/Adak –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    adak_tz = timezone.get_current_timezone()
    local_dt = timezone.localtime(task.end_date, adak_tz)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
    message = (
        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</b>\n\n"
        f"üìå <b>{task.name}</b>\n\n"
        f"üìÉ {task.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üî• –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
        f"<b>{format_russian_datetime(local_dt)}</b>\n\n"
        f"üîñ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.category.name if task.category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
    )

    send_tg_message(telegram_id, message)
