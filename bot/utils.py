"""
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
- requests: https://docs.python-requests.org/
- aiohttp: https://docs.aiohttp.org/
- zoneinfo: https://docs.python.org/3/library/zoneinfo.html
"""

from typing import Any
import requests
import aiohttp
from datetime import datetime
from zoneinfo import ZoneInfo

from config import (
    CATEGORIES_URL,
    SKIP_KEYWORDS,
    TASKS_URL,
    TIMEZONE,
    RU_MONTHS_GEN,
)
from messages import EMPTY_FIELD, EMPTY_DESCRIPTION


async def find_or_create_category_id(name: str | None) -> int | None:
    """–ù–∞—Ö–æ–¥–∏—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""

    if not name or name.strip().lower() in SKIP_KEYWORDS:
        return None

    name = name.strip()

    try:
        # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        response = requests.get(
            CATEGORIES_URL,
            params={"name": name},
            timeout=10,
        )
        if response.status_code == 200:
            data = response.json()
            items = data.get("results", []) if isinstance(data, dict) else data

            for item in items:
                if isinstance(item, dict) and item.get("name") == name:
                    return item.get("id")
    except Exception:
        pass

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async with aiohttp.ClientSession() as session:
        async with session.post(
            CATEGORIES_URL, json={"name": name}, timeout=10
        ) as response:
            if response.status in (200, 201):
                created = await response.json()
                return created.get("id")

    return None


def format_readable(iso_dt: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ISO-–¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""

    if not iso_dt:
        return EMPTY_FIELD
    try:
        if iso_dt.endswith("Z"):
            iso_dt = iso_dt.replace("Z", "+00:00")

        dt = datetime.fromisoformat(iso_dt)
        adak = ZoneInfo(TIMEZONE)
        dt = dt.astimezone(adak)

        hhmm = f"{dt.hour}:{dt.minute:02d}"
        return f"{hhmm}, {dt.day} {RU_MONTHS_GEN[dt.month]} {dt.year}"
    except Exception:
        return iso_dt


def format_single_task(task: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É.

    –ü—Ä–∏–º–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞:
    '''
    üìå –ó–∞–¥–∞—á–∞: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ
    üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ –º–µ–Ω—å—à–µ 3,2%
    üîñ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü–æ–∫—É–ø–∫–∏
    üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 8:00, 15 –æ–∫—Ç—è–±—Ä—è 2025
    üî• –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 9:00, 16 –æ–∫—Ç—è–±—Ä—è 2025
    '''
    """

    from messages import TASK_FORMAT

    name = task.get("name", EMPTY_FIELD)
    description = task.get("description") or EMPTY_DESCRIPTION
    category_data = task.get("category") or {}
    category_name = (
        category_data.get("name")
        if isinstance(category_data, dict)
        else EMPTY_FIELD  # noqa: E501
    )
    created_date = format_readable(task.get("creation_date"))
    end_date = format_readable(task.get("end_date"))

    return TASK_FORMAT.format(
        name=name,
        description=description,
        category=category_name,
        created_date=created_date,
        end_date=end_date,
    )


def fetch_user_tasks(user_telegram_id: int) -> dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Django API.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏:
    - "error": str | None - –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    - "tasks": list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    try:
        response = requests.get(
            TASKS_URL,
            params={"user_telegram_id": user_telegram_id},
            timeout=10,
        )
    except requests.RequestException as e:
        return {"error": str(e), "tasks": []}

    if response.status_code != 200:
        return {
            "error": f"HTTP {response.status_code}: {response.text}",
            "tasks": [],
        }

    data = response.json()
    if isinstance(data, dict) and isinstance(data.get("results"), list):
        tasks = data["results"]
    elif isinstance(data, list):
        tasks = data
    else:
        tasks = []
    return {"error": None, "tasks": tasks}
